{"version":3,"file":"multipartFile.js","sourceRoot":"","sources":["../../src/decorators/multipartFile.ts"],"names":[],"mappings":";;;AAAA,yCAA2E;AAC3E,qCAA4F;AAE5F,oFAA+E;AAE/E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CG;AACH,SAAgB,aAAa,CAAC,IAA8B,EAAE,QAAiB;IAC7E,OAAO,CAAC,MAAW,EAAE,WAA4B,EAAE,KAAa,EAAQ,EAAE;QACxE,MAAM,IAAI,GAAG,uBAAgB,CAAC,CAAC,MAAM,EAAE,WAAW,EAAE,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC;QAElE,QAAQ,IAAI,EAAE;YACZ;gBACE,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;YAEnE,KAAK,WAAW;gBACd,MAAM,KAAK,GAAG,YAAK,CAAC,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;gBAC5D,MAAM,QAAQ,GAAG,eAAQ,CAAC,aAAa,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC;gBAC9E,MAAM,OAAO,GAAG,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC;gBAC5D,MAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;gBAE1C,IAAI,GAAG,CAAC,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAE,CAAC;gBAEtD,2BAA2B;gBAC3B,KAAK,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,qBAAqB,CAAC,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;gBAC7E,KAAK;qBACF,KAAK,CAAC,WAAW,EAAE;oBAClB,KAAK,EAAE;wBACL,WAAW,EAAE;yDAC8B;qBAC5C;iBACF,CAAC;qBACD,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;gBAE/B,IAAI,CAAC,KAAK,EAAE;oBACV,sBAAsB;oBACtB,YAAG,CAAC,iDAAuB,CAAC,CAAC,MAAM,EAAE,WAAW,EAAE,mBAAY,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;iBACtF;gBAED,IAAI,IAAI,KAAK,SAAS,EAAE;oBACtB,KAAK,CAAC,KAAK,CAAC,iDAAuB,EAAE;wBACnC,OAAO;wBACP,GAAG,EAAE,IAAI;qBACV,CAAC,CAAC;iBACJ;qBAAM;oBACL,KAAK,CAAC,KAAK,CAAC,iDAAuB,EAAE;wBACnC,MAAM,EAAE;4BACN;gCACE,IAAI;gCACJ,QAAQ;6BACT;yBACF;wBACD,OAAO;qBACR,CAAC,CAAC;iBACJ;gBAED,MAAM,UAAU,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,QAAQ,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAE/E,sBAAe,CAAC,YAAG,CAAC,UAAU,CAAC,EAAE,qBAAY,CAAC,mBAAU,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;gBAEjG,MAAM;SACT;IACH,CAAC,CAAC;AACJ,CAAC;AAxDD,sCAwDC","sourcesContent":["import {ParamTypes, Req, UseBefore, UseParamType, Use} from \"@tsed/common\";\nimport {applyDecorators, descriptorOf, getDecoratorType, Metadata, Store} from \"@tsed/core\";\nimport * as multer from \"multer\";\nimport {MultipartFileMiddleware} from \"../middlewares/MultipartFileMiddleware\";\n\n/**\n * Define a parameter as Multipart file.\n *\n * ```typescript\n * import {Controller, Post} from \"@tsed/common\";\n * import {MulterOptions, MultipartFile} from \"@tsed/multipartfiles\";\n * import {Multer} from \"@types/multer\";\n *\n * type MulterFile = Express.Multer.File;\n *\n * @Controller('/')\n * class MyCtrl {\n *   @Post('/file')\n *   private uploadFile(@MultipartFile(\"file1\") file: MulterFile) {\n *\n *   }\n *\n *   @Post('/file')\n *   @MulterOptions({dest: \"/other-dir\"})\n *   private uploadFile(@MultipartFile(\"file1\") file: MulterFile) {\n *\n *   }\n *\n *   @Post('/file2')\n *   @MulterOptions({dest: \"/other-dir\"})\n *   private uploadFile(@MultipartFile(\"file1\") file: MulterFile, @MultipartFile(\"file2\") file2: MulterFile) {\n *\n *   }\n *\n *   @Post('/files')\n *   private uploadFile(@MultipartFile(\"file1\") files: MulterFile[]) {\n *\n *   }\n * }\n * ```\n *\n * > See the tutorial on the [multer configuration](/tutorials/multer.md).\n *\n * @param name\n * @param maxCount\n * @returns Function\n * @decorator\n * @multer\n */\nexport function MultipartFile(name?: string | multer.Options, maxCount?: number): Function {\n  return (target: any, propertyKey: string | symbol, index: number): void => {\n    const type = getDecoratorType([target, propertyKey, index], true);\n\n    switch (type) {\n      default:\n        throw new Error(\"MultipartFile is only supported on parameters\");\n\n      case \"parameter\":\n        const store = Store.fromMethod(target, String(propertyKey));\n        const multiple = Metadata.getParamTypes(target, propertyKey)[index] === Array;\n        const options = typeof name === \"object\" ? name : undefined;\n        const added = store.has(\"multipartAdded\");\n\n        name = (typeof name === \"object\" ? undefined : name)!;\n\n        // create endpoint metadata\n        store.merge(\"consumes\", [\"multipart/form-data\"]).set(\"multipartAdded\", true);\n        store\n          .merge(\"responses\", {\n            \"400\": {\n              description: `<File too long | Too many parts | Too many files | Field name too long | Field value too long | Too many fields | Unexpected field>  [fieldName]\n                            Example: File too long file1`\n            }\n          })\n          .set(\"multipartAdded\", true);\n\n        if (!added) {\n          // middleware is added\n          Use(MultipartFileMiddleware)(target, propertyKey, descriptorOf(target, propertyKey));\n        }\n\n        if (name === undefined) {\n          store.merge(MultipartFileMiddleware, {\n            options,\n            any: true\n          });\n        } else {\n          store.merge(MultipartFileMiddleware, {\n            fields: [\n              {\n                name,\n                maxCount\n              }\n            ],\n            options\n          });\n        }\n\n        const expression = [\"files\", name, !multiple && \"0\"].filter(Boolean).join(\".\");\n\n        applyDecorators(Req(expression), UseParamType(ParamTypes.FORM_DATA))(target, propertyKey, index);\n\n        break;\n    }\n  };\n}\n"]}