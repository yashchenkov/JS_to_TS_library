"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultipartFile = void 0;
const common_1 = require("@tsed/common");
const core_1 = require("@tsed/core");
const MultipartFileMiddleware_1 = require("../middlewares/MultipartFileMiddleware");
/**
 * Define a parameter as Multipart file.
 *
 * ```typescript
 * import {Controller, Post} from "@tsed/common";
 * import {MulterOptions, MultipartFile} from "@tsed/multipartfiles";
 * import {Multer} from "@types/multer";
 *
 * type MulterFile = Express.Multer.File;
 *
 * @Controller('/')
 * class MyCtrl {
 *   @Post('/file')
 *   private uploadFile(@MultipartFile("file1") file: MulterFile) {
 *
 *   }
 *
 *   @Post('/file')
 *   @MulterOptions({dest: "/other-dir"})
 *   private uploadFile(@MultipartFile("file1") file: MulterFile) {
 *
 *   }
 *
 *   @Post('/file2')
 *   @MulterOptions({dest: "/other-dir"})
 *   private uploadFile(@MultipartFile("file1") file: MulterFile, @MultipartFile("file2") file2: MulterFile) {
 *
 *   }
 *
 *   @Post('/files')
 *   private uploadFile(@MultipartFile("file1") files: MulterFile[]) {
 *
 *   }
 * }
 * ```
 *
 * > See the tutorial on the [multer configuration](/tutorials/multer.md).
 *
 * @param name
 * @param maxCount
 * @returns Function
 * @decorator
 * @multer
 */
function MultipartFile(name, maxCount) {
    return (target, propertyKey, index) => {
        const type = core_1.getDecoratorType([target, propertyKey, index], true);
        switch (type) {
            default:
                throw new Error("MultipartFile is only supported on parameters");
            case "parameter":
                const store = core_1.Store.fromMethod(target, String(propertyKey));
                const multiple = core_1.Metadata.getParamTypes(target, propertyKey)[index] === Array;
                const options = typeof name === "object" ? name : undefined;
                const added = store.has("multipartAdded");
                name = (typeof name === "object" ? undefined : name);
                // create endpoint metadata
                store.merge("consumes", ["multipart/form-data"]).set("multipartAdded", true);
                store
                    .merge("responses", {
                    "400": {
                        description: `<File too long | Too many parts | Too many files | Field name too long | Field value too long | Too many fields | Unexpected field>  [fieldName]
                            Example: File too long file1`
                    }
                })
                    .set("multipartAdded", true);
                if (!added) {
                    // middleware is added
                    common_1.Use(MultipartFileMiddleware_1.MultipartFileMiddleware)(target, propertyKey, core_1.descriptorOf(target, propertyKey));
                }
                if (name === undefined) {
                    store.merge(MultipartFileMiddleware_1.MultipartFileMiddleware, {
                        options,
                        any: true
                    });
                }
                else {
                    store.merge(MultipartFileMiddleware_1.MultipartFileMiddleware, {
                        fields: [
                            {
                                name,
                                maxCount
                            }
                        ],
                        options
                    });
                }
                const expression = ["files", name, !multiple && "0"].filter(Boolean).join(".");
                core_1.applyDecorators(common_1.Req(expression), common_1.UseParamType(common_1.ParamTypes.FORM_DATA))(target, propertyKey, index);
                break;
        }
    };
}
exports.MultipartFile = MultipartFile;
//# sourceMappingURL=multipartFile.js.map