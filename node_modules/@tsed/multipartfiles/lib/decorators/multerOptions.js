"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MulterOptions = void 0;
const core_1 = require("@tsed/core");
const MultipartFileMiddleware_1 = require("../middlewares/MultipartFileMiddleware");
/**
 * Define multer option for all MultipartFile
 *
 * ```typescript
 * import {Controller, Post} from "@tsed/common";
 * import {MulterOptions, MultipartFile} from "@tsed/multipartfiles";
 * import {Multer} from "@types/multer";
 *
 * type MulterFile = Express.Multer.File;
 *
 * @Controller('/')
 * class MyCtrl {
 *   @Post('/file')
 *   private uploadFile(@MultipartFile("file1") file: MulterFile) {
 *
 *   }
 *
 *   @Post('/file')
 *   @MulterOptions({dest: "/other-dir"})
 *   private uploadFile(@MultipartFile("file1") file: MulterFile) {
 *
 *   }
 *
 *   @Post('/file2')
 *   @MulterOptions({dest: "/other-dir"})
 *   private uploadFile(@MultipartFile("file1") file: MulterFile, @MultipartFile("file2") file2: MulterFile) {
 *
 *   }
 *
 *   @Post('/files')
 *   private uploadFile(@MultipartFile("file1") files: MulterFile[]) {
 *
 *   }
 * }
 * ```
 *
 * > See the tutorial on the [multer configuration](/tutorials/multer.md).
 * @param {multer.Options} options
 * @returns {(target: any, propertyKey: string, descriptor: PropertyDescriptor) => PropertyDescriptor}
 * @decorator
 * @multer
 */
function MulterOptions(options) {
    return (target, propertyKey, descriptor) => {
        const type = core_1.decoratorTypeOf([target, propertyKey, descriptor]);
        switch (type) {
            default:
                throw new Error("MulterOptions is only supported on method");
            case core_1.DecoratorTypes.METHOD:
                core_1.Store.fromMethod(target, propertyKey).merge(MultipartFileMiddleware_1.MultipartFileMiddleware, {
                    options
                });
                return descriptor;
        }
    };
}
exports.MulterOptions = MulterOptions;
//# sourceMappingURL=multerOptions.js.map