{"version":3,"file":"multerOptions.js","sourceRoot":"","sources":["../../src/decorators/multerOptions.ts"],"names":[],"mappings":";;;AAAA,qCAAkE;AAElE,oFAA+E;AAE/E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAyCG;AACH,SAAgB,aAAa,CAAC,OAAuB;IACnD,OAAO,CAAC,MAAW,EAAE,WAAmB,EAAE,UAA8B,EAAE,EAAE;QAC1E,MAAM,IAAI,GAAG,sBAAe,CAAC,CAAC,MAAM,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC;QAEhE,QAAQ,IAAI,EAAE;YACZ;gBACE,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;YAC/D,KAAK,qBAAc,CAAC,MAAM;gBACxB,YAAK,CAAC,UAAU,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,KAAK,CAAC,iDAAuB,EAAE;oBACnE,OAAO;iBACR,CAAC,CAAC;gBAEH,OAAO,UAAU,CAAC;SACrB;IACH,CAAC,CAAC;AACJ,CAAC;AAfD,sCAeC","sourcesContent":["import {decoratorTypeOf, DecoratorTypes, Store} from \"@tsed/core\";\nimport * as Multer from \"multer\";\nimport {MultipartFileMiddleware} from \"../middlewares/MultipartFileMiddleware\";\n\n/**\n * Define multer option for all MultipartFile\n *\n * ```typescript\n * import {Controller, Post} from \"@tsed/common\";\n * import {MulterOptions, MultipartFile} from \"@tsed/multipartfiles\";\n * import {Multer} from \"@types/multer\";\n *\n * type MulterFile = Express.Multer.File;\n *\n * @Controller('/')\n * class MyCtrl {\n *   @Post('/file')\n *   private uploadFile(@MultipartFile(\"file1\") file: MulterFile) {\n *\n *   }\n *\n *   @Post('/file')\n *   @MulterOptions({dest: \"/other-dir\"})\n *   private uploadFile(@MultipartFile(\"file1\") file: MulterFile) {\n *\n *   }\n *\n *   @Post('/file2')\n *   @MulterOptions({dest: \"/other-dir\"})\n *   private uploadFile(@MultipartFile(\"file1\") file: MulterFile, @MultipartFile(\"file2\") file2: MulterFile) {\n *\n *   }\n *\n *   @Post('/files')\n *   private uploadFile(@MultipartFile(\"file1\") files: MulterFile[]) {\n *\n *   }\n * }\n * ```\n *\n * > See the tutorial on the [multer configuration](/tutorials/multer.md).\n * @param {multer.Options} options\n * @returns {(target: any, propertyKey: string, descriptor: PropertyDescriptor) => PropertyDescriptor}\n * @decorator\n * @multer\n */\nexport function MulterOptions(options: Multer.Options): MethodDecorator {\n  return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n    const type = decoratorTypeOf([target, propertyKey, descriptor]);\n\n    switch (type) {\n      default:\n        throw new Error(\"MulterOptions is only supported on method\");\n      case DecoratorTypes.METHOD:\n        Store.fromMethod(target, propertyKey).merge(MultipartFileMiddleware, {\n          options\n        });\n\n        return descriptor;\n    }\n  };\n}\n"]}