{"version":3,"file":"MultipartFileMiddleware.js","sourceRoot":"","sources":["../../src/middlewares/MultipartFileMiddleware.ts"],"names":[],"mappings":";;;;;AAAA,yCAA4F;AAC5F,iCAAiC;AACjC,iDAA4C;AAC5C,+BAA+B;AAE/B;;GAEG;AAEH,IAAa,uBAAuB,+BAApC,MAAa,uBAAuB;IAGlC,YAAqC,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;QAFzD,WAAM,GAAQ,MAAM,CAAC;IAEuC,CAAC;IAErE,KAAK,CAAC,GAAG,CAAiB,QAAsB,EAAS,OAAY,EAAS,QAAa;QACzF,IAAI;YACF,MAAM,qBAAqB,GAAG,QAAQ,CAAC,GAAG,CAAC,yBAAuB,CAAC,CAAC;YAEpE,OAAO,MAAM,gBAAS,CAAC,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;SAC/E;QAAC,OAAO,EAAE,EAAE;YACX,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,uBAAU,CAAC,GAAG,EAAE,CAAC,OAAO,IAAI,EAAE,CAAC,KAAK,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;SAC/E;IACH,CAAC;IAED,MAAM,CAAC,IAAS;QACd,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC;QAC1C,MAAM,OAAO,GAAG;YACd,IAAI;YACJ,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YAChD,GAAG,CAAC,IAAI,CAAC,OAAO,IAAI,EAAE,CAAC;SACxB,CAAC;QAEF,0BAA0B;QAC1B,IAAI,OAAO,CAAC,OAAO,EAAE;YACnB,OAAO,OAAO,CAAC,IAAI,CAAC;SACrB;QAED,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;YACb,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAC,IAAI,EAAE,QAAQ,EAAM,EAAE,EAAE,CAAC,CAAC,EAAC,IAAI,EAAE,QAAQ,EAAC,CAAC,CAAC,CAAC;YAE9E,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SAC5C;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC;IACpC,CAAC;CACF,CAAA;AA/BC;IAAW,mBAAA,qBAAY,EAAE,CAAA,EAA0B,mBAAA,YAAG,EAAE,CAAA,EAAgB,mBAAA,YAAG,EAAE,CAAA;;;;kDAQ5E;AAbU,uBAAuB;IADnC,mBAAU,EAAE;IAIE,mBAAA,sBAAa,EAAE,CAAA;;GAHjB,uBAAuB,CAoCnC;AApCY,0DAAuB","sourcesContent":["import {Configuration, EndpointInfo, IMiddleware, Middleware, Req, Res} from \"@tsed/common\";\nimport * as multer from \"multer\";\nimport {BadRequest} from \"@tsed/exceptions\";\nimport {promisify} from \"util\";\n\n/**\n * @middleware\n */\n@Middleware()\nexport class MultipartFileMiddleware implements IMiddleware {\n  private multer: any = multer;\n\n  constructor(@Configuration() private configuration: Configuration) {}\n\n  async use(@EndpointInfo() endpoint: EndpointInfo, @Req() request: Req, @Res() response: Res) {\n    try {\n      const endpointConfiguration = endpoint.get(MultipartFileMiddleware);\n\n      return await promisify(this.invoke(endpointConfiguration))(request, response);\n    } catch (er) {\n      throw er.code ? new BadRequest(`${er.message} ${er.field || \"\"}`.trim()) : er;\n    }\n  }\n\n  invoke(conf: any) {\n    const dest = this.configuration.uploadDir;\n    const options = {\n      dest,\n      ...(this.configuration.get<any>(\"multer\") || {}),\n      ...(conf.options || {})\n    };\n\n    /* istanbul ignore next */\n    if (options.storage) {\n      delete options.dest;\n    }\n\n    if (!conf.any) {\n      const fields = conf.fields.map(({name, maxCount}: any) => ({name, maxCount}));\n\n      return this.multer(options).fields(fields);\n    }\n\n    return this.multer(options).any();\n  }\n}\n"]}