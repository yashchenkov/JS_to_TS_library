"use strict";
var MultipartFileMiddleware_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultipartFileMiddleware = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@tsed/common");
const multer = require("multer");
const exceptions_1 = require("@tsed/exceptions");
const util_1 = require("util");
/**
 * @middleware
 */
let MultipartFileMiddleware = MultipartFileMiddleware_1 = class MultipartFileMiddleware {
    constructor(configuration) {
        this.configuration = configuration;
        this.multer = multer;
    }
    async use(endpoint, request, response) {
        try {
            const endpointConfiguration = endpoint.get(MultipartFileMiddleware_1);
            return await util_1.promisify(this.invoke(endpointConfiguration))(request, response);
        }
        catch (er) {
            throw er.code ? new exceptions_1.BadRequest(`${er.message} ${er.field || ""}`.trim()) : er;
        }
    }
    invoke(conf) {
        const dest = this.configuration.uploadDir;
        const options = {
            dest,
            ...(this.configuration.get("multer") || {}),
            ...(conf.options || {})
        };
        /* istanbul ignore next */
        if (options.storage) {
            delete options.dest;
        }
        if (!conf.any) {
            const fields = conf.fields.map(({ name, maxCount }) => ({ name, maxCount }));
            return this.multer(options).fields(fields);
        }
        return this.multer(options).any();
    }
};
tslib_1.__decorate([
    tslib_1.__param(0, common_1.EndpointInfo()), tslib_1.__param(1, common_1.Req()), tslib_1.__param(2, common_1.Res()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], MultipartFileMiddleware.prototype, "use", null);
MultipartFileMiddleware = MultipartFileMiddleware_1 = tslib_1.__decorate([
    common_1.Middleware(),
    tslib_1.__param(0, common_1.Configuration()),
    tslib_1.__metadata("design:paramtypes", [Object])
], MultipartFileMiddleware);
exports.MultipartFileMiddleware = MultipartFileMiddleware;
//# sourceMappingURL=MultipartFileMiddleware.js.map